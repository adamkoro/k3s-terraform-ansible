---
- name: Clean previous runs of k3s-init
  systemd:
    name: k3s-init
    state: stopped
  failed_when: false
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])

- name: Clean previous runs of k3s-init
  command: systemctl reset-failed k3s-init
  failed_when: false
  changed_when: false
  args:
    warn: false
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])

- name: Copy k3s-init service file to first master
  register: k3s_service
  template:
    src: "k3s-init.service.j2"
    dest: "{{ systemd_dir }}/k3s-init.service"
    owner: root
    group: root
    mode: 0644
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])


- name: Start and check k3s-init service on first master
  systemd:
    name: k3s-init
    daemon_reload: yes
    state: started
    enabled: no
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])


- name: Wait for node-token
  wait_for:
    path: "{{ k3s_server_location }}/server/node-token"
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])


- name: Register node-token file access mode
  stat:
    path: "{{ k3s_server_location }}/server/node-token"
  register: p

- name: Change file access node-token
  file:
    path: "{{ k3s_server_location }}/server/node-token"
    mode: "g+rx,o+rx"
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])

- name: Read node-token from master
  slurp:
    path: "{{ k3s_server_location }}/server/node-token"
  register: node_token
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])
  tags:
    - cluster_update

- name: Store Master node-token
  set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])
  tags:
    - cluster_update

- name: Restore node-token file access
  file:
    path: "{{ k3s_server_location }}/server/node-token"
    mode: "{{ p.stat.mode }}"
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])

- name: Copy manifests to the first node
  include_tasks: manifests.yml
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])
  tags:
    - manifests
    - cluster_update


- name: Kill k3s-init temporary service which is used for initialization
  systemd:
    name: k3s-init
    state: stopped
  failed_when: false
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])
  tags:
    - first_install

- name: Copy K3s service file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644
  tags:
    - cluster_update

- name: Enable and check K3s service
  systemd:
    name: k3s
    daemon_reload: yes
    state: restarted
    enabled: yes
  tags:
    cluster_update

- name: Verify that all master nodes actually joined
  command:
    cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
  register: nodes
  until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['master'] | length)
  retries: "{{ retry_count | default(20) }}"
  delay: 10

- name: "Wait for Kubernetes api port at {{ apiserver_endpoint }}"
  wait_for:
    host: "{{ apiserver_endpoint }}"
    port: 6443
    delay: 10

- name: Create directory .kube
  file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: Delete default configs from kube config
  command: '{{ item }}'
  with_items:
    - k3s kubectl config delete-cluster default --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config delete-context default --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config delete-user default --kubeconfig ~{{ ansible_user }}/.kube/config
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])
  tags:
    config_update

- name: Read server cert from master
  slurp:
    path: "/var/lib/rancher/k3s/server/tls/server-ca.crt"
  register: server_cert
  tags:
    config_update
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])

- name: Read admin client cert from master
  slurp:
    path: "/var/lib/rancher/k3s/server/tls/client-admin.crt"
  register: client_admin_cert
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])
  tags:
    config_update

- name: Read admin client cert from master
  slurp:
    path: "/var/lib/rancher/k3s/server/tls/client-admin.key"
  register: client_admin_key
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])
  tags:
    config_update

- name: Configure kube config for prod
  command: "{{ item }}"
  with_items:
    - k3s kubectl config set-cluster {{ kconfig_cluster_name }} --server=https://{{ apiserver_endpoint }}:6443 --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set clusters.{{ kconfig_cluster_name }}.certificate-authority-data {{ server_cert.content }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set-context {{ kconfig_cluster_name }} --user=admin_{{ kconfig_cluster_name }} --cluster={{ kconfig_cluster_name }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set-credentials admin_{{ kconfig_cluster_name }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set users.admin_{{ kconfig_cluster_name }}.client-certificate-data {{ client_admin_cert.content }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set users.admin_{{ kconfig_cluster_name }}.client-key-data {{ client_admin_key.content }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config use-context {{ kconfig_cluster_name }} --kubeconfig ~{{ ansible_user }}/.kube/config
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])
  tags:
    config_update

- name: Create kubectl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Copy kubeconfig from first remote master
  fetch:
    src: "~{{ ansible_user }}/.kube/config"
    dest: "~/.kube/config.{{ kconfig_cluster_name }}"
    flat: yes
  when: ansible_host == hostvars[groups['master'][0]]['ansible_host'] | default(groups['master'][0])
  tags:
    - config_update
    - get_config