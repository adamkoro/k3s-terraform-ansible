- name: Kill k3s-init temporary service which is used for initialization
  systemd:
    name: k3s-init
    state: stopped
  failed_when: false

- name: Copy manifests to the first node
  include_tasks: manifests.yml
  when: inventory_hostname == groups['control_plane'][0]
  tags:
    - manifests
    - cluster_update

- name: Copy K3s service file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: "/etc/systemd/system/k3s.service"
    owner: root
    group: root
    mode: 0644
  tags:
    - cluster_update

- name: Enable and check K3s service
  systemd:
    name: k3s
    daemon_reload: yes
    state: restarted
    enabled: yes
  tags:
    - cluster_update
    - update_k3s

- name: Create directory .kube
  file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: Delete default configs from kube config
  command: '{{ item }}'
  with_items:
    - k3s kubectl config delete-cluster default --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config delete-context default --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config delete-user default --kubeconfig ~{{ ansible_user }}/.kube/config
  when: inventory_hostname == groups['control_plane'][0]
  tags:
    config_update

- name: Read server cert from master
  slurp:
    path: "/var/lib/rancher/k3s/server/tls/server-ca.crt"
  register: server_cert
  tags:
    config_update
  when: inventory_hostname == groups['control_plane'][0]

- name: Read admin client cert from master
  slurp:
    path: "/var/lib/rancher/k3s/server/tls/client-admin.crt"
  register: client_admin_cert
  when: inventory_hostname == groups['control_plane'][0]
  tags:
    config_update

- name: Read admin client cert from master
  slurp:
    path: "/var/lib/rancher/k3s/server/tls/client-admin.key"
  register: client_admin_key
  when: inventory_hostname == groups['control_plane'][0]
  tags:
    config_update

- name: Configure kube config for {{ cluster_name }}
  command: "{{ item }}"
  with_items:
    - k3s kubectl config set-cluster {{ kconfig_cluster_name }} --server=https://{{ cluster_endpoint }}:6443 --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set clusters.{{ kconfig_cluster_name }}.certificate-authority-data {{ server_cert.content }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set-context {{ kconfig_cluster_name }} --user=admin_{{ kconfig_cluster_name }} --cluster={{ kconfig_cluster_name }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set-credentials admin_{{ kconfig_cluster_name }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set users.admin_{{ kconfig_cluster_name }}.client-certificate-data {{ client_admin_cert.content }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config set users.admin_{{ kconfig_cluster_name }}.client-key-data {{ client_admin_key.content }} --kubeconfig ~{{ ansible_user }}/.kube/config
    - k3s kubectl config use-context {{ kconfig_cluster_name }} --kubeconfig ~{{ ansible_user }}/.kube/config
  when: inventory_hostname == groups['control_plane'][0]
  tags:
    config_update

- name: Create kubectl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Copy kubeconfig from first remote master
  fetch:
    src: "~{{ ansible_user }}/.kube/config"
    dest: "~/.kube/config.{{ kconfig_cluster_name }}"
    flat: yes
  when: inventory_hostname == groups['control_plane'][0]
  tags:
    - config_update
    - get_config