- name: Install packages
  community.general.zypper:
    name: "{{ item }}"
    state: present
    disable_recommends: false
  loop:
    - nginx
    - pacemaker
    - corosync
    - crmsh
  tags:
    - restore

- name: Generate corosync authkey
  ansible.builtin.command: corosync-keygen
  when: inventory_hostname == groups['loadbalancer'][0]
  changed_when: true
  tags: 
    - restore

- name: Read corosync authkey
  ansible.builtin.slurp:
    src: "/etc/corosync/authkey"
  register: corosync_authkey
  when: inventory_hostname == groups['loadbalancer'][0]
  tags: 
    - restore

- name: Store etcd node-token
  ansible.builtin.set_fact:
    token: "{{ corosync_authkey.content | b64decode }}"
  when: inventory_hostname == groups['loadbalancer'][0]
  tags: 
    - restore

- name: Synchronizing authkey to other nodes
  ansible.builtin.copy:
    content: "{{ hostvars[groups['loadbalancer'][0]]['token'] }}"
    dest: /etc/corosync/authkey
    mode: "0400"
  when: inventory_hostname != groups['loadbalancer'][0]
  tags: 
    - restore

- name: Create corosync log file
  ansible.builtin.file:
    path: "/var/log/corosync.log"
    state: touch
    owner: root
    group: root
    mode: "0644"
  tags:
    - restore

- name: Copy nginx loadbalancer config
  ansible.builtin.template:
    src: "nginx.conf.j2"
    dest: "/etc/nginx/nginx.conf"
    owner: root
    group: root
    mode: "0644"
  tags:
    - restore

- name: Copy corosync config
  ansible.builtin.template:
    src: "corosync.conf.j2"
    dest: "/etc/corosync/corosync.conf"
    owner: root
    group: root
    mode: "0644"
  tags:
    - restore

- name: Enable and check nginx,corosync and pacemaker service
  ansible.builtin.systemd:
    name: "{{ item }}"
    daemon_reload: true
    state: restarted
    enabled: true
  loop:
    - nginx
    - corosync
    - pacemaker
  tags:
    - restore

- name: Disable stonith device
  ansible.builtin.command: crm configure property stonith-enabled=false
  when: inventory_hostname == groups['loadbalancer'][0]
  changed_when: true
  tags:
    - restore

- name: Remove quorum policy
  ansible.builtin.command: crm configure property no-quorum-policy=ignore
  when: inventory_hostname == groups['loadbalancer'][0]
  changed_when: true
  tags:
    - restore

- name: Setup virtual ip1 for cluster
  ansible.builtin.command: crm configure primitive virtual_ip1 ocf:heartbeat:IPaddr2 params ip="{{ cluster_endpoint }}" cidr_netmask="32" op monitor interval="10s" meta migration-threshold="10"
  when: inventory_hostname == groups['loadbalancer'][0]
  changed_when: true
  tags:
    - restore

- name: Setup virtual ip2 for cluster
  ansible.builtin.command: crm configure primitive virtual_ip2 ocf:heartbeat:IPaddr2 params ip="192.168.2.20" cidr_netmask="32" op monitor interval="10s" meta migration-threshold="10"
  when: inventory_hostname == groups['loadbalancer'][0]
  changed_when: true
  tags:
    - restore

- name: Setup nginx HA
  ansible.builtin.command: crm configure primitive k3s_api ocf:heartbeat:nginx configfile=/etc/nginx/nginx.conf op start timeout="40s" interval="0" op stop timeout="60s" interval="0" op monitor interval="10s" timeout="60s" meta migration-threshold="10"
  when: inventory_hostname == groups['loadbalancer'][0]
  changed_when: true
  tags:
    - restore

- name: Create group for created resources
  ansible.builtin.command: crm configure group k3s_lb virtual_ip k3s_api
  when: inventory_hostname == groups['loadbalancer'][0]
  changed_when: true
  tags:
    - restore

- name: Wait for etcd nodes loadbalancer port
  ansible.builtin.wait_for:
    host: "{{ cluster_endpoint }}"
    port: 6444
    delay: 30
    connect_timeout: 10
    timeout: 30
  tags:
    - restore

- name: Wait for control-plane nodes loadbalancer port
  ansible.builtin.wait_for:
    host: "{{ cluster_endpoint }}"
    port: 6443
    delay: 1
    connect_timeout: 10
    timeout: 30
  tags:
    - restore
